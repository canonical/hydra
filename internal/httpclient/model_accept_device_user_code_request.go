/*
Ory Hydra API

Documentation for all of Ory Hydra's APIs.

API version:
Contact: hi@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AcceptDeviceUserCodeRequest Contains information on an device verification
type AcceptDeviceUserCodeRequest struct {
	UserCode *string `json:"user_code,omitempty"`
}

// NewAcceptDeviceUserCodeRequest instantiates a new AcceptDeviceUserCodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceptDeviceUserCodeRequest() *AcceptDeviceUserCodeRequest {
	this := AcceptDeviceUserCodeRequest{}
	return &this
}

// NewAcceptDeviceUserCodeRequestWithDefaults instantiates a new AcceptDeviceUserCodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceptDeviceUserCodeRequestWithDefaults() *AcceptDeviceUserCodeRequest {
	this := AcceptDeviceUserCodeRequest{}
	return &this
}

// GetUserCode returns the UserCode field value if set, zero value otherwise.
func (o *AcceptDeviceUserCodeRequest) GetUserCode() string {
	if o == nil || o.UserCode == nil {
		var ret string
		return ret
	}
	return *o.UserCode
}

// GetUserCodeOk returns a tuple with the UserCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptDeviceUserCodeRequest) GetUserCodeOk() (*string, bool) {
	if o == nil || o.UserCode == nil {
		return nil, false
	}
	return o.UserCode, true
}

// HasUserCode returns a boolean if a field has been set.
func (o *AcceptDeviceUserCodeRequest) HasUserCode() bool {
	if o != nil && o.UserCode != nil {
		return true
	}

	return false
}

// SetUserCode gets a reference to the given string and assigns it to the UserCode field.
func (o *AcceptDeviceUserCodeRequest) SetUserCode(v string) {
	o.UserCode = &v
}

func (o AcceptDeviceUserCodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserCode != nil {
		toSerialize["user_code"] = o.UserCode
	}
	return json.Marshal(toSerialize)
}

type NullableAcceptDeviceUserCodeRequest struct {
	value *AcceptDeviceUserCodeRequest
	isSet bool
}

func (v NullableAcceptDeviceUserCodeRequest) Get() *AcceptDeviceUserCodeRequest {
	return v.value
}

func (v *NullableAcceptDeviceUserCodeRequest) Set(val *AcceptDeviceUserCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceptDeviceUserCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceptDeviceUserCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceptDeviceUserCodeRequest(val *AcceptDeviceUserCodeRequest) *NullableAcceptDeviceUserCodeRequest {
	return &NullableAcceptDeviceUserCodeRequest{value: val, isSet: true}
}

func (v NullableAcceptDeviceUserCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceptDeviceUserCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
